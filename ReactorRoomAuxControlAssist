//////////////////////////////////////////////////////////////
// Reactor Modules Display Script for Inset LCD
//
// This script remains dormant until "initialize" is run.
// When activated, it displays information on the
// "Reactor Room Aux Inset LCD" (a small grid inset LCD).
//
// The display layout is as follows:
//   1) Header (red sprite text): "Reactor Modules"
//      - Adjustable font size and starting position.
//   2) Dynamic Info Section (two columns):
//      - Static labels (left column) and variable values (right column)
//      - Info lines:
//            Coolant Pumps: 0/2  (color: red for 0, yellow-orange for 1, green for 2)
//            Aux Batteries: 0/4  (color: red for 0, yellow-orange for 1–3, green for 4)
//            Stored Power: {value} MWh  (green if ≥10, red if below)
//          Also toggles "Reactor Room Main Control Battery" on/off based on stored power.
//   3) Message Body (red sprite text):
//         "10MW of stored power is required to activate this reactor."
//
// No menu is drawn in this version.
// 
// Adjust the tunable variables below as needed.
//////////////////////////////////////////////////////////////

// ----------------- TUNABLE VARIABLES -----------------

// Activation: script remains dormant until "initialize" is run.
bool active = false;

// Header settings:
string headerText = "Reactor Modules";
float headerFontScale = 1.5f;  
Vector2 headerPosition = new Vector2(40, 20);  // Adjust as needed

// Dynamic Info settings:
float infoFontScaleLabel = 0.8f;   // Font scale for labels
float infoFontScaleValue = 0.8f;   // Font scale for values
float infoLineSpacing = 20f;       // Vertical spacing between info lines
Vector2 infoStartPos = new Vector2(80, 80); // Starting position for dynamic info
float valueColumnX = 330f;         // X position for variable values

// Message body settings:
string messageBody = "10MW of stored power is required\nto activate this reactor.";
float messageFontScale = 0.8f;
Vector2 messagePosition = new Vector2(20, 200);  // Adjust as needed

// Colors:
Color colorOnline = Color.Green;
Color colorOffline = Color.Red;
Color colorWarning = new Color(255, 165, 0); // yellow-orange
Color staticLabelColor = Color.White; // for static labels
Color messageColor = Color.Red;         // for the message body

// Stored power threshold (in MWh)
double storedPowerThreshold = 10.0;

// ----------------- BLOCK NAMES -----------------
string coolantPumpBatteryLeft = "Reactor Left Aux Coolant Pump Battery";
string coolantPumpBatteryRight = "Reactor Right Aux Coolant Pump Battery";

string auxBattery1 = "Reactor Aux Battery 1";
string auxBattery2 = "Reactor Aux Battery 2";
string auxBattery3 = "Reactor Aux Battery 3";
string auxBattery4 = "Reactor Aux Battery 4";

string mainControlBatteryName = "Reactor Room Main Control Battery";

// The LCD to be controlled:
string lcdName = "Reactor Room Aux Inset LCD";

// ----------------- GLOBALS -----------------
IMyTextSurface lcd;  

// ----------------- PROGRAM INIT -----------------
public Program() {
    Runtime.UpdateFrequency = UpdateFrequency.Update10;
    
    // Get the LCD block (assume it's a TextPanel)
    IMyTerminalBlock block = GridTerminalSystem.GetBlockWithName(lcdName);
    if(block != null) {
        lcd = block as IMyTextSurface;
        if(lcd != null) {
            // Set to SCRIPT so we can draw sprites
            lcd.ContentType = ContentType.SCRIPT;
            ClearLCD(lcd);
        }
    }
    // Remain dormant until "initialize" is run.
}

// ----------------- MAIN FUNCTION -----------------
public void Main(string argument, UpdateType updateSource) {
    if (argument.ToLower() == "reset") {
        ResetState();
        Echo("PB reset to starting state.");
        return;
    }

    if((updateSource & (UpdateType.Terminal | UpdateType.Trigger)) != 0) {
        if(argument.ToLower() == "initialize") {
            active = true;
        }
    }
    
    if(!active) {
        // Do nothing if not active.
        return;
    }
    
    UpdateDisplay();
}

// ----------------- UPDATE DISPLAY -----------------
void UpdateDisplay() {
    if(lcd == null) return;
    
    Vector2 size = lcd.TextureSize;
    using(var frame = lcd.DrawFrame()) {
        // Draw a black background
        var bg = new MySprite(SpriteType.TEXTURE, "SquareSimple", size * 0.5f, size, Color.Black);
        frame.Add(bg);
        
        // 1) Draw the header
        var headerSprite = new MySprite(SpriteType.TEXT, headerText);
        headerSprite.Position = headerPosition;
        headerSprite.Color = Color.Red;  // header in red
        headerSprite.FontId = "Monospace";
        headerSprite.RotationOrScale = headerFontScale;
        headerSprite.Alignment = TextAlignment.LEFT;
        frame.Add(headerSprite);
        
        // 2) Draw dynamic info lines starting at infoStartPos.
        float y = infoStartPos.Y;
        
        // a) Coolant Pumps:
        int pumpCount = GetSimulatedPumpCount(coolantPumpBatteryLeft, coolantPumpBatteryRight);
        string pumpsLabel = "Coolant Pumps:";
        string pumpsValue = pumpCount + "/2";
        Color pumpsValueColor = (pumpCount == 2) ? colorOnline : (pumpCount == 1 ? colorWarning : colorOffline);
        DrawInfoLine(frame, infoStartPos.X, y, pumpsLabel, pumpsValue, staticLabelColor, pumpsValueColor);
        y += infoLineSpacing;
        
        // b) Aux Batteries:
        int auxCount = GetAuxBatteryCount(auxBattery1, auxBattery2, auxBattery3, auxBattery4);
        string auxLabel = "Aux Batteries:";
        string auxValue = auxCount + "/4";
        Color auxValueColor = (auxCount == 4) ? colorOnline : (auxCount >= 1 ? colorWarning : colorOffline);
        DrawInfoLine(frame, infoStartPos.X, y, auxLabel, auxValue, staticLabelColor, auxValueColor);
        y += infoLineSpacing;
        
        // c) Stored Power:
        double totalPower = GetTotalStoredPower();
        string powerLabel = "Stored Power:";
        string powerValue = totalPower.ToString("F1") + " MWh";
        Color powerValueColor = (totalPower >= storedPowerThreshold) ? colorOnline : colorOffline;
        DrawInfoLine(frame, infoStartPos.X, y, powerLabel, powerValue, staticLabelColor, powerValueColor);
        y += infoLineSpacing;
        
        // Toggle main control battery based on stored power.
        ToggleMainControlBattery(totalPower);
        
        // 3) Draw the message body (in red)
        var messageSprite = new MySprite(SpriteType.TEXT, messageBody);
        messageSprite.Position = messagePosition;
        messageSprite.Color = messageColor;
        messageSprite.FontId = "Monospace";
        messageSprite.RotationOrScale = messageFontScale;
        messageSprite.Alignment = TextAlignment.LEFT;
        frame.Add(messageSprite);
    }
}

void ResetState() {
    // Reinitialize your variables/state.
    // For instance, you can call your constructor logic or
    // simply set your globals to their default values.
    Runtime.UpdateFrequency = UpdateFrequency.Update10;
    // ...more initialization...
}

// ----------------- DRAWING HELPER FUNCTIONS -----------------
void DrawInfoLine(MySpriteDrawFrame frame, float x, float y, string label, string value, Color labelColor, Color valueColor) {
    // Draw label in left column (starting at x)
    var labelSprite = new MySprite(SpriteType.TEXT, label);
    labelSprite.Position = new Vector2(x, y);
    labelSprite.Color = labelColor;
    labelSprite.FontId = "Monospace";
    labelSprite.RotationOrScale = infoFontScaleLabel;
    labelSprite.Alignment = TextAlignment.LEFT;
    frame.Add(labelSprite);
    
    // Draw value in the right column (fixed at valueColumnX)
    var valueSprite = new MySprite(SpriteType.TEXT, value);
    valueSprite.Position = new Vector2(valueColumnX, y);
    valueSprite.Color = valueColor;
    valueSprite.FontId = "Monospace";
    valueSprite.RotationOrScale = infoFontScaleValue;
    valueSprite.Alignment = TextAlignment.LEFT;
    frame.Add(valueSprite);
}

// ----------------- CLEAR LCD -----------------
void ClearLCD(IMyTextSurface surf) {
    Vector2 size = surf.TextureSize;
    using(var frame = surf.DrawFrame()) {
        var bg = new MySprite(SpriteType.TEXTURE, "SquareSimple", size * 0.5f, size, Color.Black);
        frame.Add(bg);
    }
}

// ----------------- BATTERY/POWER HELPER FUNCTIONS -----------------
int GetSimulatedPumpCount(string name1, string name2) {
    int count = 0;
    IMyBatteryBlock bat1 = GridTerminalSystem.GetBlockWithName(name1) as IMyBatteryBlock;
    IMyBatteryBlock bat2 = GridTerminalSystem.GetBlockWithName(name2) as IMyBatteryBlock;
    if(bat1 != null && bat1.Enabled) count++;
    if(bat2 != null && bat2.Enabled) count++;
    return count;
}

int GetAuxBatteryCount(string n1, string n2, string n3, string n4) {
    int count = 0;
    IMyBatteryBlock b1 = GridTerminalSystem.GetBlockWithName(n1) as IMyBatteryBlock;
    IMyBatteryBlock b2 = GridTerminalSystem.GetBlockWithName(n2) as IMyBatteryBlock;
    IMyBatteryBlock b3 = GridTerminalSystem.GetBlockWithName(n3) as IMyBatteryBlock;
    IMyBatteryBlock b4 = GridTerminalSystem.GetBlockWithName(n4) as IMyBatteryBlock;
    if(b1 != null && b1.Enabled) count++;
    if(b2 != null && b2.Enabled) count++;
    if(b3 != null && b3.Enabled) count++;
    if(b4 != null && b4.Enabled) count++;
    return count;
}

double GetTotalStoredPower() {
    List<IMyBatteryBlock> batteries = new List<IMyBatteryBlock>();
    GridTerminalSystem.GetBlocksOfType(batteries);
    double total = 0;
    foreach(var bat in batteries) {
        total += bat.CurrentStoredPower;
    }
    return total;
}

void ToggleMainControlBattery(double totalPower) {
    IMyBatteryBlock mainControl = GridTerminalSystem.GetBlockWithName(mainControlBatteryName) as IMyBatteryBlock;
    if(mainControl != null) {
        mainControl.Enabled = (totalPower >= storedPowerThreshold);
    }
}
